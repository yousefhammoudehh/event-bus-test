[tool.poetry]
name = "olive-events-bus"
version = "0.0.1"
description = "Olive Events Bus: Internal Kafka SDK for event-driven microservices (producers/consumers, schemas, observability)."
license = "MIT"
readme = "README.md"
repository = "https://github.com/OptimumPartners/olive-events-bus"
packages = [{ include = "olive_events_bus" }]
include = [
    # Ship embedded JSON Schemas with the package for runtime loading
    { path = "olive_events_bus/schemas/**/*.json", format = "sdist" },
    { path = "olive_events_bus/schemas/**/*.json", format = "wheel" },
]

[tool.poetry.dependencies]
python = ">=3.13,<4.0"
aiokafka = "^0.12.0"
jsonschema = "^4.25.1"
aiohttp = "^3.12.15"
aiofiles = "^24.1.0"
backoff = "^2.2.1"
prometheus-client = "^0.22.1"
opentelemetry-api = "^1.36.0"
opentelemetry-sdk = { version = "^1.36.0", optional = true }
kafka-python-ng = { version = "^2.2.3", optional = true }
psycopg = { version = "^3.2.9", extras = ["binary"], optional = true }
SQLAlchemy = { version = "^2.0.31", optional = true }

[tool.poetry.extras]
monitoring = ["opentelemetry-sdk"]
admin = ["kafka-python-ng"]
outbox = ["psycopg", "SQLAlchemy"]

[tool.poetry.group.dev.dependencies]
types-aiofiles = "^24.1.0.20250822"
ruff = "^0.12.10"
mypy = "^1.17.1"
pre-commit = "^4.3.0"

[build-system]
requires = ["poetry-core>=2.1.3"]
build-backend = "poetry.core.masonry.api"

# Linting configuration
[tool.ruff]
line-length = 120
target-version = 'py313'
exclude = ["temp/", ".venv"]


[tool.ruff.lint]
select = [
    'E',   # pycodestyle errors
    'F',   # pyflakes
    'B',   # flake8-bugbear
    'I',   # isort
    'C4',  # flake8-comprehensions
    'N',   # pep8-naming
    'UP',  # pyupgrade
    'S',   # flake8-bandit (security)
    'A',   # flake8-builtins
    'COM', # flake8-commas
    'T20', # flake8-print
    'PT',  # flake8-pytest-style
    'RET', # flake8-return
    'SIM', # flake8-simplify
    'ARG', # flake8-unused-arguments
    'ERA', # eradicate (commented out code)
    'PL',  # pylint
    'RUF', # Ruff-specific rules
]
ignore = [
    'E501',   # Line too long (handled by formatter)
    'B008',   # Do not perform function call in argument defaults
    'COM812', # Commas should be on the line after the comma
]
[tool.ruff.lint.isort]
known-third-party = ["alembic", "fastapi", "sqlalchemy"]
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 4

[tool.ruff.lint.pylint]
max-args = 8


[tool.ruff.format]
quote-style = 'single'
skip-magic-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101"]

[tool.mypy]
python_version = '3.13'
strict = true
show_error_codes = true
explicit_package_bases = true
namespace_packages = true
ignore_missing_imports = true
files = ["olive_events_bus", "infrastructure", "scripts", "examples"]

[tool.pyright]
# Silence Pylance/Pyright diagnostic about missing third-party type stubs
reportMissingTypeStubs = "none"
